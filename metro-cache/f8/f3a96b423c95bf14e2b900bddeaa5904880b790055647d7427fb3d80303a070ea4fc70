{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"escape-string-regexp","data":{"isAsync":false}},{"name":"query-string","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = getStateFromPath;\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\"));\n\n  var _escapeStringRegexp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"escape-string-regexp\"));\n\n  var _queryString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"query-string\"));\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  function getStateFromPath(path) {\n    var _ref;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (path === '') {\n      return undefined;\n    }\n\n    var initialRoutes = [];\n\n    var configs = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)(Object.keys(options).map(function (key) {\n      return createNormalizedConfigs(key, options, [], initialRoutes);\n    })));\n\n    var result;\n    var current;\n    var remaining = path.replace(/[/]+/, '/').replace(/^\\//, '').replace(/\\?.*/, '');\n\n    while (remaining) {\n      var routeNames = void 0;\n      var params = void 0;\n\n      var _loop = function _loop(config) {\n        var match = remaining.match(config.match);\n\n        if (match) {\n          routeNames = (0, _toConsumableArray2.default)(config.routeNames);\n          var paramPatterns = config.pattern.split('/').filter(function (p) {\n            return p.startsWith(':');\n          });\n\n          if (paramPatterns.length) {\n            params = paramPatterns.reduce(function (acc, p, i) {\n              var key = p.replace(/^:/, '');\n              var value = match[i + 1];\n              acc[key] = config.parse && config.parse[key] ? config.parse[key](value) : value;\n              return acc;\n            }, {});\n          }\n\n          remaining = remaining.replace(match[0], '');\n          return \"break\";\n        }\n      };\n\n      for (var _iterator = configs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref2;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref2 = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref2 = _i.value;\n        }\n\n        var config = _ref2;\n\n        var _ret = _loop(config);\n\n        if (_ret === \"break\") break;\n      }\n\n      if (routeNames === undefined) {\n        var segments = remaining.split('/');\n        routeNames = [decodeURIComponent(segments[0])];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      var state = void 0;\n\n      var _routeName = routeNames.shift();\n\n      var initialRoute = findInitialRoute(_routeName, initialRoutes);\n      state = createNestedState(initialRoute, _routeName, routeNames.length === 0, params);\n\n      if (routeNames.length > 0) {\n        var nestedState = state;\n\n        while (_routeName = routeNames.shift()) {\n          initialRoute = findInitialRoute(_routeName, initialRoutes);\n          nestedState.routes[nestedState.index || 0].state = createNestedState(initialRoute, _routeName, routeNames.length === 0, params);\n\n          if (routeNames.length > 0) {\n            nestedState = nestedState.routes[nestedState.index || 0].state;\n          }\n        }\n      }\n\n      if (current) {\n        var _current2;\n\n        while ((_current = current) == null ? void 0 : _current.routes[current.index || 0].state) {\n          var _current;\n\n          current = current.routes[current.index || 0].state;\n        }\n\n        current.routes[((_current2 = current) == null ? void 0 : _current2.index) || 0].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n\n    if (current == null || result == null) {\n      return undefined;\n    }\n\n    var query = path.split('?')[1];\n\n    if (query) {\n      var _current4;\n\n      while ((_current3 = current) == null ? void 0 : _current3.routes[current.index || 0].state) {\n        var _current3;\n\n        current = current.routes[current.index || 0].state;\n      }\n\n      var route = current.routes[((_current4 = current) == null ? void 0 : _current4.index) || 0];\n\n      var _params = _queryString.default.parse(query);\n\n      var parseFunction = findParseConfigForRoute(route.name, configs);\n\n      if (parseFunction) {\n        Object.keys(_params).forEach(function (name) {\n          if (parseFunction[name] && typeof _params[name] === 'string') {\n            _params[name] = parseFunction[name](_params[name]);\n          }\n        });\n      }\n\n      route.params = _objectSpread({}, route.params, {}, _params);\n    }\n\n    return result;\n  }\n\n  function createNormalizedConfigs(key, routeConfig) {\n    var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var initials = arguments.length > 3 ? arguments[3] : undefined;\n    var configs = [];\n    routeNames.push(key);\n    var value = routeConfig[key];\n\n    if (typeof value === 'string') {\n      if (value !== '') {\n        configs.push(createConfigItem(routeNames, value));\n      }\n    } else if (typeof value === 'object') {\n      if (value.path && value.path !== '') {\n        configs.push(createConfigItem(routeNames, value.path, value.parse));\n      }\n\n      if (value.screens) {\n        if (value.initialRouteName) {\n          initials.push({\n            initialRouteName: value.initialRouteName,\n            connectedRoutes: Object.keys(value.screens)\n          });\n        }\n\n        Object.keys(value.screens).forEach(function (nestedConfig) {\n          var result = createNormalizedConfigs(nestedConfig, value.screens, routeNames, initials);\n          configs.push.apply(configs, (0, _toConsumableArray2.default)(result));\n        });\n      }\n    }\n\n    routeNames.pop();\n    return configs;\n  }\n\n  function createConfigItem(routeNames, pattern, parse) {\n    var match = new RegExp('^' + (0, _escapeStringRegexp.default)(pattern).replace(/:[a-z0-9]+/gi, '([^/]+)') + '/?');\n    return {\n      match: match,\n      pattern: pattern,\n      routeNames: (0, _toConsumableArray2.default)(routeNames),\n      parse: parse\n    };\n  }\n\n  function findParseConfigForRoute(routeName, flatConfig) {\n    for (var _iterator2 = flatConfig, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n      var _ref3;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref3 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref3 = _i2.value;\n      }\n\n      var _config = _ref3;\n\n      if (routeName === _config.routeNames[_config.routeNames.length - 1]) {\n        return _config.parse;\n      }\n    }\n\n    return undefined;\n  }\n\n  function findInitialRoute(routeName, initialRoutes) {\n    for (var _iterator3 = initialRoutes, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n      var _ref4;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref4 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref4 = _i3.value;\n      }\n\n      var _config2 = _ref4;\n\n      if (_config2.connectedRoutes.includes(routeName)) {\n        return _config2.initialRouteName === routeName ? undefined : _config2.initialRouteName;\n      }\n    }\n\n    return undefined;\n  }\n\n  function createNestedState(initialRoute, routeName, isEmpty, params) {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, _objectSpread({\n            name: routeName\n          }, params && {\n            params: params\n          })]\n        };\n      } else {\n        return {\n          routes: [_objectSpread({\n            name: routeName\n          }, params && {\n            params: params\n          })]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, {\n            name: routeName,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            name: routeName,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      }\n    }\n  }\n});","lineCount":303,"map":[[13,0,1,0],[15,0,2,0],[21,0,57,15],[21,11,57,24,"getStateFromPath"],[21,27,57,15],[21,28,58,2,"path"],[21,32,57,15],[21,34,60,27],[22,0,60,27],[24,0,60,27],[24,8,59,2,"options"],[24,15,60,27],[24,86,59,21],[24,88,60,27],[26,0,61,2],[26,8,61,6,"path"],[26,12,61,10],[26,17,61,15],[26,19,61,2],[26,21,61,19],[27,0,62,4],[27,13,62,11,"undefined"],[27,22,62,4],[28,0,63,3],[30,0,64,2],[30,8,64,6,"initialRoutes"],[30,21,64,41],[30,24,64,44],[30,26,64,2],[32,0,66,2],[32,8,66,8,"configs"],[32,15,66,15],[32,18,66,18],[32,26,66,19],[32,28,66,18],[32,30,66,40,"concat"],[32,36,66,18],[32,82,67,7,"Object"],[32,88,67,13],[32,89,67,14,"keys"],[32,93,67,7],[32,94,67,19,"options"],[32,101,67,7],[32,103,67,28,"map"],[32,106,67,7],[32,107,67,32],[32,117,67,32,"key"],[32,120,67,35],[33,0,67,35],[33,13,68,6,"createNormalizedConfigs"],[33,36,68,29],[33,37,68,30,"key"],[33,40,68,29],[33,42,68,35,"options"],[33,49,68,29],[33,51,68,44],[33,53,68,29],[33,55,68,48,"initialRoutes"],[33,68,68,29],[33,69,67,35],[34,0,67,35],[34,5,67,7],[34,6,66,18],[34,8,66,2],[36,0,72,2],[36,8,72,6,"result"],[36,14,72,2],[37,0,73,2],[37,8,73,6,"current"],[37,15,73,2],[38,0,75,2],[38,8,75,6,"remaining"],[38,17,75,15],[38,20,75,18,"path"],[38,24,75,22],[38,25,76,5,"replace"],[38,32,75,18],[38,33,76,13],[38,39,75,18],[38,41,76,21],[38,44,75,18],[38,46,77,5,"replace"],[38,53,75,18],[38,54,77,13],[38,59,75,18],[38,61,77,20],[38,63,75,18],[38,65,78,5,"replace"],[38,72,75,18],[38,73,78,13],[38,79,75,18],[38,81,78,21],[38,83,75,18],[38,84,75,2],[40,0,80,2],[40,11,80,9,"remaining"],[40,20,80,2],[40,22,80,20],[41,0,81,4],[41,10,81,8,"routeNames"],[41,20,81,40],[41,29,81,4],[42,0,82,4],[42,10,82,8,"params"],[42,16,82,47],[42,25,82,4],[44,0,80,20],[44,33,85,15,"config"],[44,39,80,20],[45,0,86,6],[45,12,86,12,"match"],[45,17,86,17],[45,20,86,20,"remaining"],[45,29,86,29],[45,30,86,30,"match"],[45,35,86,20],[45,36,86,36,"config"],[45,42,86,42],[45,43,86,43,"match"],[45,48,86,20],[45,49,86,6],[47,0,89,6],[47,12,89,10,"match"],[47,17,89,6],[47,19,89,17],[48,0,90,8,"routeNames"],[48,10,90,8,"routeNames"],[48,20,90,18],[48,56,90,25,"config"],[48,62,90,31],[48,63,90,32,"routeNames"],[48,73,90,18],[48,74,90,8],[49,0,92,8],[49,14,92,14,"paramPatterns"],[49,27,92,27],[49,30,92,30,"config"],[49,36,92,36],[49,37,92,37,"pattern"],[49,44,92,30],[49,45,93,11,"split"],[49,50,92,30],[49,51,93,17],[49,54,92,30],[49,56,94,11,"filter"],[49,62,92,30],[49,63,94,18],[49,73,94,18,"p"],[49,74,94,19],[50,0,94,19],[50,19,94,23,"p"],[50,20,94,24],[50,21,94,25,"startsWith"],[50,31,94,23],[50,32,94,36],[50,35,94,23],[50,36,94,19],[51,0,94,19],[51,11,92,30],[51,12,92,8],[53,0,96,8],[53,14,96,12,"paramPatterns"],[53,27,96,25],[53,28,96,26,"length"],[53,34,96,8],[53,36,96,34],[54,0,97,10,"params"],[54,12,97,10,"params"],[54,18,97,16],[54,21,97,19,"paramPatterns"],[54,34,97,32],[54,35,97,33,"reduce"],[54,41,97,19],[54,42,97,61],[54,52,97,62,"acc"],[54,55,97,61],[54,57,97,67,"p"],[54,58,97,61],[54,60,97,70,"i"],[54,61,97,61],[54,63,97,76],[55,0,98,12],[55,18,98,18,"key"],[55,21,98,21],[55,24,98,24,"p"],[55,25,98,25],[55,26,98,26,"replace"],[55,33,98,24],[55,34,98,34],[55,38,98,24],[55,40,98,40],[55,42,98,24],[55,43,98,12],[56,0,99,12],[56,18,99,18,"value"],[56,23,99,23],[56,26,99,26,"match"],[56,31,99,31],[56,32,99,32,"i"],[56,33,99,33],[56,36,99,36],[56,37,99,31],[56,38,99,12],[57,0,101,12,"acc"],[57,14,101,12,"acc"],[57,17,101,15],[57,18,101,16,"key"],[57,21,101,15],[57,22,101,12],[57,25,102,14,"config"],[57,31,102,20],[57,32,102,21,"parse"],[57,37,102,14],[57,41,102,30,"config"],[57,47,102,36],[57,48,102,37,"parse"],[57,53,102,30],[57,54,102,43,"key"],[57,57,102,30],[57,58,102,14],[57,61,103,18,"config"],[57,67,103,24],[57,68,103,25,"parse"],[57,73,103,18],[57,74,103,31,"key"],[57,77,103,18],[57,79,103,36,"value"],[57,84,103,18],[57,85,102,14],[57,88,104,18,"value"],[57,93,101,12],[58,0,106,12],[58,21,106,19,"acc"],[58,24,106,12],[59,0,107,11],[59,13,97,19],[59,15,107,13],[59,17,97,19],[59,18,97,10],[60,0,108,9],[62,0,111,8,"remaining"],[62,10,111,8,"remaining"],[62,19,111,17],[62,22,111,20,"remaining"],[62,31,111,29],[62,32,111,30,"replace"],[62,39,111,20],[62,40,111,38,"match"],[62,45,111,43],[62,46,111,44],[62,47,111,43],[62,48,111,20],[62,50,111,48],[62,52,111,20],[62,53,111,8],[63,0,113,8],[64,0,114,7],[65,0,80,20],[67,0,85,4],[67,27,85,25,"configs"],[67,34,85,4],[67,194,85,34],[68,0,85,34],[70,0,85,34],[71,0,85,34],[72,0,85,34],[73,0,85,34],[74,0,85,34],[75,0,85,34],[76,0,85,34],[77,0,85,34],[79,0,85,34],[79,12,85,15,"config"],[79,18,85,34],[81,0,85,34],[81,25,85,15,"config"],[81,31,85,34],[83,0,85,34],[83,30,113,8],[84,0,115,5],[86,0,118,4],[86,10,118,8,"routeNames"],[86,20,118,18],[86,25,118,23,"undefined"],[86,34,118,4],[86,36,118,34],[87,0,119,6],[87,12,119,12,"segments"],[87,20,119,20],[87,23,119,23,"remaining"],[87,32,119,32],[87,33,119,33,"split"],[87,38,119,23],[87,39,119,39],[87,42,119,23],[87,43,119,6],[88,0,121,6,"routeNames"],[88,8,121,6,"routeNames"],[88,18,121,16],[88,21,121,19],[88,22,121,20,"decodeURIComponent"],[88,40,121,38],[88,41,121,39,"segments"],[88,49,121,47],[88,50,121,48],[88,51,121,47],[88,52,121,38],[88,53,121,19],[88,54,121,6],[89,0,122,6,"segments"],[89,8,122,6,"segments"],[89,16,122,14],[89,17,122,15,"shift"],[89,22,122,6],[90,0,123,6,"remaining"],[90,8,123,6,"remaining"],[90,17,123,15],[90,20,123,18,"segments"],[90,28,123,26],[90,29,123,27,"join"],[90,33,123,18],[90,34,123,32],[90,37,123,18],[90,38,123,6],[91,0,124,5],[93,0,126,4],[93,10,126,8,"state"],[93,15,126,27],[93,24,126,4],[95,0,127,4],[95,10,127,8,"routeName"],[95,20,127,17],[95,23,127,20,"routeNames"],[95,33,127,30],[95,34,127,31,"shift"],[95,39,127,20],[95,41,127,4],[97,0,128,4],[97,10,128,8,"initialRoute"],[97,22,128,20],[97,25,128,23,"findInitialRoute"],[97,41,128,39],[97,42,128,40,"routeName"],[97,52,128,39],[97,54,128,51,"initialRoutes"],[97,67,128,39],[97,68,128,4],[98,0,130,4,"state"],[98,6,130,4,"state"],[98,11,130,9],[98,14,130,12,"createNestedState"],[98,31,130,29],[98,32,131,6,"initialRoute"],[98,44,130,29],[98,46,132,6,"routeName"],[98,56,130,29],[98,58,133,6,"routeNames"],[98,68,133,16],[98,69,133,17,"length"],[98,75,133,6],[98,80,133,28],[98,81,130,29],[98,83,134,6,"params"],[98,89,130,29],[98,90,130,4],[100,0,137,4],[100,10,137,8,"routeNames"],[100,20,137,18],[100,21,137,19,"length"],[100,27,137,8],[100,30,137,28],[100,31,137,4],[100,33,137,31],[101,0,138,6],[101,12,138,10,"nestedState"],[101,23,138,21],[101,26,138,24,"state"],[101,31,138,6],[103,0,140,6],[103,15,140,14,"routeName"],[103,25,140,23],[103,28,140,26,"routeNames"],[103,38,140,36],[103,39,140,37,"shift"],[103,44,140,26],[103,46,140,6],[103,48,140,57],[104,0,141,8,"initialRoute"],[104,10,141,8,"initialRoute"],[104,22,141,20],[104,25,141,23,"findInitialRoute"],[104,41,141,39],[104,42,141,40,"routeName"],[104,52,141,39],[104,54,141,51,"initialRoutes"],[104,67,141,39],[104,68,141,8],[105,0,142,8,"nestedState"],[105,10,142,8,"nestedState"],[105,21,142,19],[105,22,142,20,"routes"],[105,28,142,8],[105,29,142,27,"nestedState"],[105,40,142,38],[105,41,142,39,"index"],[105,46,142,27],[105,50,142,48],[105,51,142,8],[105,53,142,51,"state"],[105,58,142,8],[105,61,142,59,"createNestedState"],[105,78,142,76],[105,79,143,10,"initialRoute"],[105,91,142,76],[105,93,144,10,"routeName"],[105,103,142,76],[105,105,145,10,"routeNames"],[105,115,145,20],[105,116,145,21,"length"],[105,122,145,10],[105,127,145,32],[105,128,142,76],[105,130,146,10,"params"],[105,136,142,76],[105,137,142,8],[107,0,148,8],[107,14,148,12,"routeNames"],[107,24,148,22],[107,25,148,23,"length"],[107,31,148,12],[107,34,148,32],[107,35,148,8],[107,37,148,35],[108,0,149,10,"nestedState"],[108,12,149,10,"nestedState"],[108,23,149,21],[108,26,149,24,"nestedState"],[108,37,149,35],[108,38,149,36,"routes"],[108,44,149,24],[108,45,149,43,"nestedState"],[108,56,149,54],[108,57,149,55,"index"],[108,62,149,43],[108,66,149,64],[108,67,149,24],[108,69,150,13,"state"],[108,74,149,10],[109,0,151,9],[110,0,152,7],[111,0,153,5],[113,0,155,4],[113,10,155,8,"current"],[113,17,155,4],[113,19,155,17],[114,0,155,17],[116,0,157,6],[116,27,157,13,"current"],[116,34,157,6],[116,55,157,13],[116,64,157,22,"routes"],[116,70,157,13],[116,71,157,29,"current"],[116,78,157,36],[116,79,157,37,"index"],[116,84,157,29],[116,88,157,46],[116,89,157,13],[116,91,157,49,"state"],[116,96,157,6],[116,98,157,56],[117,0,157,56],[119,0,158,8,"current"],[119,10,158,8,"current"],[119,17,158,15],[119,20,158,18,"current"],[119,27,158,25],[119,28,158,26,"routes"],[119,34,158,18],[119,35,158,33,"current"],[119,42,158,40],[119,43,158,41,"index"],[119,48,158,33],[119,52,158,50],[119,53,158,18],[119,55,158,53,"state"],[119,60,158,8],[120,0,159,7],[122,0,161,7,"current"],[122,8,161,7,"current"],[122,15,161,6],[122,16,161,49,"routes"],[122,22,161,6],[122,23,162,8],[122,37,162,8,"current"],[122,44,162,15],[122,53,162,8],[122,75,162,17,"index"],[122,80,162,8],[122,85,162,26],[122,86,161,6],[122,88,163,8,"state"],[122,93,161,6],[122,96,163,16,"state"],[122,101,161,6],[123,0,164,5],[123,7,155,4],[123,13,164,11],[124,0,165,6,"result"],[124,8,165,6,"result"],[124,14,165,12],[124,17,165,15,"state"],[124,22,165,6],[125,0,166,5],[127,0,168,4,"current"],[127,6,168,4,"current"],[127,13,168,11],[127,16,168,14,"state"],[127,21,168,4],[128,0,169,3],[130,0,171,2],[130,8,171,6,"current"],[130,15,171,13],[130,19,171,17],[130,23,171,6],[130,27,171,25,"result"],[130,33,171,31],[130,37,171,35],[130,41,171,2],[130,43,171,41],[131,0,172,4],[131,13,172,11,"undefined"],[131,22,172,4],[132,0,173,3],[134,0,175,2],[134,8,175,8,"query"],[134,13,175,13],[134,16,175,16,"path"],[134,20,175,20],[134,21,175,21,"split"],[134,26,175,16],[134,27,175,27],[134,30,175,16],[134,32,175,32],[134,33,175,16],[134,34,175,2],[136,0,177,2],[136,8,177,6,"query"],[136,13,177,2],[136,15,177,13],[137,0,177,13],[139,0,178,4],[139,26,178,11,"current"],[139,33,178,4],[139,54,178,11],[139,64,178,20,"routes"],[139,70,178,11],[139,71,178,27,"current"],[139,78,178,34],[139,79,178,35,"index"],[139,84,178,27],[139,88,178,44],[139,89,178,11],[139,91,178,47,"state"],[139,96,178,4],[139,98,178,54],[140,0,178,54],[142,0,180,6,"current"],[142,8,180,6,"current"],[142,15,180,13],[142,18,180,16,"current"],[142,25,180,23],[142,26,180,24,"routes"],[142,32,180,16],[142,33,180,31,"current"],[142,40,180,38],[142,41,180,39,"index"],[142,46,180,31],[142,50,180,48],[142,51,180,16],[142,53,180,51,"state"],[142,58,180,6],[143,0,181,5],[145,0,183,4],[145,10,183,10,"route"],[145,15,183,15],[145,18,183,19,"current"],[145,25,183,18],[145,26,183,61,"routes"],[145,32,183,18],[145,33,184,6],[145,47,184,6,"current"],[145,54,184,13],[145,63,184,6],[145,85,184,15,"index"],[145,90,184,6],[145,95,184,24],[145,96,183,18],[145,97,183,4],[147,0,187,4],[147,10,187,10,"params"],[147,17,187,16],[147,20,187,19,"queryString"],[147,41,187,31,"parse"],[147,46,187,19],[147,47,187,37,"query"],[147,52,187,19],[147,53,187,4],[149,0,188,4],[149,10,188,10,"parseFunction"],[149,23,188,23],[149,26,188,26,"findParseConfigForRoute"],[149,49,188,49],[149,50,188,50,"route"],[149,55,188,55],[149,56,188,56,"name"],[149,60,188,49],[149,62,188,62,"configs"],[149,69,188,49],[149,70,188,4],[151,0,190,4],[151,10,190,8,"parseFunction"],[151,23,190,4],[151,25,190,23],[152,0,191,6,"Object"],[152,8,191,6,"Object"],[152,14,191,12],[152,15,191,13,"keys"],[152,19,191,6],[152,20,191,18,"params"],[152,27,191,6],[152,29,191,26,"forEach"],[152,36,191,6],[152,37,191,34],[152,47,191,34,"name"],[152,51,191,38],[152,53,191,42],[153,0,192,8],[153,14,192,12,"parseFunction"],[153,27,192,25],[153,28,192,26,"name"],[153,32,192,25],[153,33,192,12],[153,37,192,35],[153,44,192,42,"params"],[153,51,192,48],[153,52,192,49,"name"],[153,56,192,48],[153,57,192,35],[153,62,192,59],[153,70,192,8],[153,72,192,69],[154,0,193,10,"params"],[154,12,193,10,"params"],[154,19,193,16],[154,20,193,17,"name"],[154,24,193,16],[154,25,193,10],[154,28,193,25,"parseFunction"],[154,41,193,38],[154,42,193,39,"name"],[154,46,193,38],[154,47,193,25],[154,48,193,45,"params"],[154,55,193,51],[154,56,193,52,"name"],[154,60,193,51],[154,61,193,25],[154,62,193,10],[155,0,194,9],[156,0,195,7],[156,9,191,6],[157,0,196,5],[159,0,198,4,"route"],[159,6,198,4,"route"],[159,11,198,9],[159,12,198,10,"params"],[159,18,198,4],[159,39,198,24,"route"],[159,44,198,29],[159,45,198,30,"params"],[159,51,198,4],[159,57,198,41,"params"],[159,64,198,4],[160,0,199,3],[162,0,201,2],[162,11,201,9,"result"],[162,17,201,2],[163,0,202,1],[165,0,204,0],[165,11,204,9,"createNormalizedConfigs"],[165,34,204,0],[165,35,205,2,"key"],[165,38,204,0],[165,40,206,2,"routeConfig"],[165,51,204,0],[165,53,209,17],[166,0,209,17],[166,8,207,2,"routeNames"],[166,18,209,17],[166,89,207,25],[166,91,209,17],[167,0,209,17],[167,8,208,2,"initials"],[167,16,209,17],[168,0,210,2],[168,8,210,8,"configs"],[168,15,210,30],[168,18,210,33],[168,20,210,2],[169,0,212,2,"routeNames"],[169,4,212,2,"routeNames"],[169,14,212,12],[169,15,212,13,"push"],[169,19,212,2],[169,20,212,18,"key"],[169,23,212,2],[170,0,214,2],[170,8,214,8,"value"],[170,13,214,13],[170,16,214,16,"routeConfig"],[170,27,214,27],[170,28,214,28,"key"],[170,31,214,27],[170,32,214,2],[172,0,216,2],[172,8,216,6],[172,15,216,13,"value"],[172,20,216,6],[172,25,216,23],[172,33,216,2],[172,35,216,33],[173,0,218,4],[173,10,218,8,"value"],[173,15,218,13],[173,20,218,18],[173,22,218,4],[173,24,218,22],[174,0,219,6,"configs"],[174,8,219,6,"configs"],[174,15,219,13],[174,16,219,14,"push"],[174,20,219,6],[174,21,219,19,"createConfigItem"],[174,37,219,35],[174,38,219,36,"routeNames"],[174,48,219,35],[174,50,219,48,"value"],[174,55,219,35],[174,56,219,6],[175,0,220,5],[176,0,221,3],[176,5,216,2],[176,11,221,9],[176,15,221,13],[176,22,221,20,"value"],[176,27,221,13],[176,32,221,30],[176,40,221,9],[176,42,221,40],[177,0,225,4],[177,10,225,8,"value"],[177,15,225,13],[177,16,225,14,"path"],[177,20,225,8],[177,24,225,22,"value"],[177,29,225,27],[177,30,225,28,"path"],[177,34,225,22],[177,39,225,37],[177,41,225,4],[177,43,225,41],[178,0,226,6,"configs"],[178,8,226,6,"configs"],[178,15,226,13],[178,16,226,14,"push"],[178,20,226,6],[178,21,226,19,"createConfigItem"],[178,37,226,35],[178,38,226,36,"routeNames"],[178,48,226,35],[178,50,226,48,"value"],[178,55,226,53],[178,56,226,54,"path"],[178,60,226,35],[178,62,226,60,"value"],[178,67,226,65],[178,68,226,66,"parse"],[178,73,226,35],[178,74,226,6],[179,0,227,5],[181,0,228,4],[181,10,228,8,"value"],[181,15,228,13],[181,16,228,14,"screens"],[181,23,228,4],[181,25,228,23],[182,0,230,6],[182,12,230,10,"value"],[182,17,230,15],[182,18,230,16,"initialRouteName"],[182,34,230,6],[182,36,230,34],[183,0,231,8,"initials"],[183,10,231,8,"initials"],[183,18,231,16],[183,19,231,17,"push"],[183,23,231,8],[183,24,231,22],[184,0,232,10,"initialRouteName"],[184,12,232,10,"initialRouteName"],[184,28,232,26],[184,30,232,28,"value"],[184,35,232,33],[184,36,232,34,"initialRouteName"],[184,52,231,22],[185,0,233,10,"connectedRoutes"],[185,12,233,10,"connectedRoutes"],[185,27,233,25],[185,29,233,27,"Object"],[185,35,233,33],[185,36,233,34,"keys"],[185,40,233,27],[185,41,233,39,"value"],[185,46,233,44],[185,47,233,45,"screens"],[185,54,233,27],[186,0,231,22],[186,11,231,8],[187,0,235,7],[189,0,236,6,"Object"],[189,8,236,6,"Object"],[189,14,236,12],[189,15,236,13,"keys"],[189,19,236,6],[189,20,236,18,"value"],[189,25,236,23],[189,26,236,24,"screens"],[189,33,236,6],[189,35,236,33,"forEach"],[189,42,236,6],[189,43,236,41],[189,53,236,41,"nestedConfig"],[189,65,236,53],[189,67,236,57],[190,0,237,8],[190,14,237,14,"result"],[190,20,237,20],[190,23,237,23,"createNormalizedConfigs"],[190,46,237,46],[190,47,238,10,"nestedConfig"],[190,59,237,46],[190,61,239,10,"value"],[190,66,239,15],[190,67,239,16,"screens"],[190,74,237,46],[190,76,240,10,"routeNames"],[190,86,237,46],[190,88,241,10,"initials"],[190,96,237,46],[190,97,237,8],[191,0,243,8,"configs"],[191,10,243,8,"configs"],[191,17,243,15],[191,18,243,16,"push"],[191,22,243,8],[191,29,243,8,"configs"],[191,36,243,15],[191,71,243,24,"result"],[191,77,243,15],[191,79,243,8],[192,0,244,7],[192,9,236,6],[193,0,245,5],[194,0,246,3],[196,0,248,2,"routeNames"],[196,4,248,2,"routeNames"],[196,14,248,12],[196,15,248,13,"pop"],[196,18,248,2],[197,0,250,2],[197,11,250,9,"configs"],[197,18,250,2],[198,0,251,1],[200,0,253,0],[200,11,253,9,"createConfigItem"],[200,27,253,0],[200,28,254,2,"routeNames"],[200,38,253,0],[200,40,255,2,"pattern"],[200,47,253,0],[200,49,256,2,"parse"],[200,54,253,0],[200,56,257,15],[201,0,258,2],[201,8,258,8,"match"],[201,13,258,13],[201,16,258,16],[201,20,258,20,"RegExp"],[201,26,258,16],[201,27,259,4],[201,33,259,10],[201,66,259,17,"pattern"],[201,73,259,10],[201,75,259,26,"replace"],[201,82,259,10],[201,83,259,34],[201,97,259,10],[201,99,259,50],[201,108,259,10],[201,109,259,4],[201,112,259,63],[201,116,258,16],[201,117,258,2],[202,0,262,2],[202,11,262,9],[203,0,263,4,"match"],[203,6,263,4,"match"],[203,11,263,9],[203,13,263,4,"match"],[203,18,262,9],[204,0,264,4,"pattern"],[204,6,264,4,"pattern"],[204,13,264,11],[204,15,264,4,"pattern"],[204,22,262,9],[205,0,266,4,"routeNames"],[205,6,266,4,"routeNames"],[205,16,266,14],[205,51,266,20,"routeNames"],[205,61,266,14],[205,62,262,9],[206,0,267,4,"parse"],[206,6,267,4,"parse"],[206,11,267,9],[206,13,267,4,"parse"],[207,0,262,9],[207,5,262,2],[208,0,269,1],[210,0,271,0],[210,11,271,9,"findParseConfigForRoute"],[210,34,271,0],[210,35,272,2,"routeName"],[210,44,271,0],[210,46,273,2,"flatConfig"],[210,56,271,0],[210,58,274,27],[211,0,275,2],[211,26,275,23,"flatConfig"],[211,36,275,2],[211,203,275,35],[212,0,275,35],[214,0,275,35],[215,0,275,35],[216,0,275,35],[217,0,275,35],[218,0,275,35],[219,0,275,35],[220,0,275,35],[221,0,275,35],[223,0,275,35],[223,10,275,13,"config"],[223,17,275,35],[225,0,276,4],[225,10,276,8,"routeName"],[225,19,276,17],[225,24,276,22,"config"],[225,31,276,28],[225,32,276,29,"routeNames"],[225,42,276,22],[225,43,276,40,"config"],[225,50,276,46],[225,51,276,47,"routeNames"],[225,61,276,40],[225,62,276,58,"length"],[225,68,276,40],[225,71,276,67],[225,72,276,22],[225,73,276,4],[225,75,276,71],[226,0,277,6],[226,15,277,13,"config"],[226,22,277,19],[226,23,277,20,"parse"],[226,28,277,6],[227,0,278,5],[228,0,279,3],[230,0,280,2],[230,11,280,9,"undefined"],[230,20,280,2],[231,0,281,1],[233,0,284,0],[233,11,284,9,"findInitialRoute"],[233,27,284,0],[233,28,285,2,"routeName"],[233,37,284,0],[233,39,286,2,"initialRoutes"],[233,52,284,0],[233,54,287,22],[234,0,288,2],[234,26,288,23,"initialRoutes"],[234,39,288,2],[234,206,288,38],[235,0,288,38],[237,0,288,38],[238,0,288,38],[239,0,288,38],[240,0,288,38],[241,0,288,38],[242,0,288,38],[243,0,288,38],[244,0,288,38],[246,0,288,38],[246,10,288,13,"config"],[246,18,288,38],[248,0,289,4],[248,10,289,8,"config"],[248,18,289,14],[248,19,289,15,"connectedRoutes"],[248,34,289,8],[248,35,289,31,"includes"],[248,43,289,8],[248,44,289,40,"routeName"],[248,53,289,8],[248,54,289,4],[248,56,289,52],[249,0,290,6],[249,15,290,13,"config"],[249,23,290,19],[249,24,290,20,"initialRouteName"],[249,40,290,13],[249,45,290,41,"routeName"],[249,54,290,13],[249,57,291,10,"undefined"],[249,66,290,13],[249,69,292,10,"config"],[249,77,292,16],[249,78,292,17,"initialRouteName"],[249,94,290,6],[250,0,293,5],[251,0,294,3],[253,0,295,2],[253,11,295,9,"undefined"],[253,20,295,2],[254,0,296,1],[256,0,300,0],[256,11,300,9,"createNestedState"],[256,28,300,0],[256,29,301,2,"initialRoute"],[256,41,300,0],[256,43,302,2,"routeName"],[256,52,300,0],[256,54,303,2,"isEmpty"],[256,61,300,0],[256,63,304,2,"params"],[256,69,300,0],[256,71,305,16],[257,0,306,2],[257,8,306,6,"isEmpty"],[257,15,306,2],[257,17,306,15],[258,0,307,4],[258,10,307,8,"initialRoute"],[258,22,307,4],[258,24,307,22],[259,0,308,6],[259,15,308,13],[260,0,309,8,"index"],[260,10,309,8,"index"],[260,15,309,13],[260,17,309,15],[260,18,308,13],[261,0,310,8,"routes"],[261,10,310,8,"routes"],[261,16,310,14],[261,18,310,16],[261,19,311,10],[262,0,311,12,"name"],[262,12,311,12,"name"],[262,16,311,16],[262,18,311,18,"initialRoute"],[263,0,311,10],[263,11,310,16],[264,0,312,12,"name"],[264,12,312,12,"name"],[264,16,312,16],[264,18,312,18,"routeName"],[265,0,310,16],[265,13,312,43,"params"],[265,19,312,49],[265,23,312,53],[266,0,312,55,"params"],[266,12,312,55,"params"],[266,18,312,61],[266,20,312,55,"params"],[267,0,312,53],[267,11,310,16],[268,0,308,13],[268,9,308,6],[269,0,315,5],[269,7,307,4],[269,13,315,11],[270,0,316,6],[270,15,316,13],[271,0,317,8,"routes"],[271,10,317,8,"routes"],[271,16,317,14],[271,18,317,16],[272,0,317,19,"name"],[272,12,317,19,"name"],[272,16,317,23],[272,18,317,25,"routeName"],[273,0,317,16],[273,13,317,50,"params"],[273,19,317,56],[273,23,317,60],[274,0,317,62,"params"],[274,12,317,62,"params"],[274,18,317,68],[274,20,317,62,"params"],[275,0,317,60],[275,11,317,16],[276,0,316,13],[276,9,316,6],[277,0,319,5],[278,0,320,3],[278,5,306,2],[278,11,320,9],[279,0,321,4],[279,10,321,8,"initialRoute"],[279,22,321,4],[279,24,321,22],[280,0,322,6],[280,15,322,13],[281,0,323,8,"index"],[281,10,323,8,"index"],[281,15,323,13],[281,17,323,15],[281,18,322,13],[282,0,324,8,"routes"],[282,10,324,8,"routes"],[282,16,324,14],[282,18,324,16],[282,19,325,10],[283,0,325,12,"name"],[283,12,325,12,"name"],[283,16,325,16],[283,18,325,18,"initialRoute"],[284,0,325,10],[284,11,324,16],[284,13,326,10],[285,0,326,12,"name"],[285,12,326,12,"name"],[285,16,326,16],[285,18,326,18,"routeName"],[285,27,326,10],[286,0,326,39,"state"],[286,12,326,39,"state"],[286,17,326,44],[286,19,326,46],[287,0,326,48,"routes"],[287,14,326,48,"routes"],[287,20,326,54],[287,22,326,56],[288,0,326,46],[289,0,326,10],[289,11,324,16],[290,0,322,13],[290,9,322,6],[291,0,329,5],[291,7,321,4],[291,13,329,11],[292,0,330,6],[292,15,330,13],[293,0,330,15,"routes"],[293,10,330,15,"routes"],[293,16,330,21],[293,18,330,23],[293,19,330,24],[294,0,330,26,"name"],[294,12,330,26,"name"],[294,16,330,30],[294,18,330,32,"routeName"],[294,27,330,24],[295,0,330,53,"state"],[295,12,330,53,"state"],[295,17,330,58],[295,19,330,60],[296,0,330,62,"routes"],[296,14,330,62,"routes"],[296,20,330,68],[296,22,330,70],[297,0,330,60],[298,0,330,24],[298,11,330,23],[299,0,330,13],[299,9,330,6],[300,0,331,5],[301,0,332,3],[302,0,333,1]],"functionMap":{"names":["<global>","getStateFromPath","Object.keys.map$argument_0","config.pattern.split.filter$argument_0","paramPatterns.reduce$argument_0","Object.keys.forEach$argument_0","createNormalizedConfigs","createConfigItem","findParseConfigForRoute","findInitialRoute","createNestedState"],"mappings":"AAA;eCwD;gCCU;8DDC;kBE0B,sBF;6DGG;WHU;kCIoF;OJI;CDO;AME;yCDgC;OCQ;CNO;AOE;CPgB;AQE;CRU;ASG;CTY;AUI;CViC"}},"type":"js/module"}]}